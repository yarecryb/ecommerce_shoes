import sqlalchemy
import os
import dotenv
from faker import Faker
import numpy as np
from datetime import datetime, timedelta
import random
import pytz

# Load environment variables
dotenv.load_dotenv()

def database_connection_url():
    DB_USER = os.environ.get("POSTGRES_USER")
    DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
    DB_SERVER = os.environ.get("POSTGRES_SERVER")
    DB_PORT = os.environ.get("POSTGRES_PORT")
    DB_NAME = os.environ.get("POSTGRES_DB")
    return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True)

# Create a new Faker instance
fake = Faker()

# Define the schema and create tables
with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
    DROP TABLE IF EXISTS cart_items;
    DROP TABLE IF EXISTS carts;
    DROP TABLE IF EXISTS catalog_ledger;
    DROP TABLE IF EXISTS catalog;
    DROP TABLE IF EXISTS users;

    create table
        public.users (
            id bigint generated by default as identity,
            created_at timestamp with time zone not null default now(),
            username text null,
            email text null,
            password text null,
            full_name text null,
            auth_token uuid null default gen_random_uuid (),
            wallet double precision not null default '0'::double precision,
            constraint users_pkey primary key (id)
        ) tablespace pg_default;

    create table
        public.catalog (
            id bigint generated by default as identity,
            title text null,
            brand text null,
            size text not null,
            price numeric null,
            created_at timestamp with time zone not null default now(),
            user_id bigint not null,
            constraint catalog_pkey primary key (id),
            constraint catalog_user_id_fkey foreign key (user_id) references users (id)
        ) tablespace pg_default;

    create table
        public.catalog_ledger (
            id bigint generated by default as identity,
            created_at timestamp with time zone not null default now(),
            customer_id bigint null,
            catalog_id bigint not null,
            quantity bigint not null,
            constraint catalog_ledger_pkey primary key (id),
            constraint catalog_ledger_catalog_id_fkey foreign key (catalog_id) references catalog (id),
            constraint catalog_ledger_customer_id_fkey foreign key (customer_id) references users (id)
        ) tablespace pg_default;

    create table
        public.carts (
            cart_id bigint generated by default as identity,
            bought boolean null,
            created_at timestamp with time zone not null default now(),
            catalog_id bigint null,
            user_id bigint not null,
            constraint carts_pkey primary key (cart_id),
            constraint carts_catalog_id_fkey foreign key (catalog_id) references catalog (id),
            constraint carts_user_id_fkey foreign key (user_id) references users (id)
        ) tablespace pg_default;

    create table
        public.cart_items (
            id bigint generated by default as identity,
            created_at timestamp with time zone not null default now(),
            cart_id bigint null,
            catalog_id bigint null,
            quantity bigint null,
            constraint cart_items_pkey primary key (id),
            constraint cart_items_cart_id_fkey foreign key (cart_id) references carts (cart_id),
            constraint cart_items_catalog_id_fkey foreign key (catalog_id) references catalog (id)
        ) tablespace pg_default;
    """))

# Number of users to generate
num_users = 100000
num_catalogs = 100000
num_ledger_entries = 300000
num_carts = 200000
num_cart_items = 300000

# Create fake data with unique usernames and emails
usernames = set()
emails = set()
users = []
for _ in range(num_users):
    while True:
        username = fake.user_name()
        if username not in usernames:
            usernames.add(username)
            break

    while True:
        email = fake.email()
        if email not in emails:
            emails.add(email)
            break

    users.append({
        'username': username,
        'email': email,
        'password': fake.password(),
        'full_name': fake.name(),
        'wallet': round(fake.random_number(digits=5, fix_len=True) / 100, 2)
    })

catalog = [{
    'title': fake.word(),
    'brand': str(fake.random_element(elements=('Adidas', 'Asics', 'Birkenstock', 'Crocs', 'Dr. Martens', 'Nike', 'Journeys', 'Puma', 'Hoka', 'New Balance', 'Converse'
                                            'Gucci', 'Lego', 'Veja', 'Snapchat', 'Under Armour', 'Balenciaga', 'Vans', 'Fila', 'Ugg', 'ON', 'Saucony', 'SKECHERS', 'allbirds'))),
    'size': str(fake.random_element(elements=('0', '1', '2','3','4','5','6','7', '8', '9', '9.5', '10', '11', '12', '13', '14', '15'))),
    'price': round(fake.random_number(digits=5, fix_len=True) / 100, 2),
    'user_id': fake.random_int(min=1, max=num_users)
} for _ in range(num_catalogs)]


def random_date(start, end, tz=pytz.utc):
    random_seconds = random.randint(0, int((end - start).total_seconds()))
    random_dt = start + timedelta(seconds=random_seconds)
    return random_dt.astimezone(tz)

start_date = datetime.now(tz=pytz.utc) - timedelta(days=365)
end_date = datetime.now(tz=pytz.utc)

start_date = datetime.now() - timedelta(days=365)
end_date = datetime.now()

catalog_ledger = [{
    'customer_id': fake.random_int(min=1, max=num_users),
    'catalog_id': fake.random_int(min=1, max=num_catalogs),
    'quantity': fake.random_int(min=-10, max=20),
    'created_at': random_date(start_date, end_date).strftime('%Y-%m-%d %H:%M:%S.%f%z')
} for _ in range(num_ledger_entries)]

carts = [{
    'bought': fake.boolean(),
    'catalog_id': fake.random_int(min=1, max=num_catalogs) if fake.boolean() else None,
    'user_id': fake.random_int(min=1, max=num_users)
} for _ in range(num_carts)]

cart_items = [{
    'cart_id': fake.random_int(min=1, max=num_carts),
    'catalog_id': fake.random_int(min=1, max=num_catalogs),
    'quantity': fake.random_int(min=1, max=10)
} for _ in range(num_cart_items)]

# Insert data into tables
with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
    INSERT INTO users (username, email, password, full_name, wallet)
    VALUES (:username, :email, :password, :full_name, :wallet);
    """), users)

    conn.execute(sqlalchemy.text("""
    INSERT INTO catalog (title, brand, size, price, user_id)
    VALUES (:title, :brand, :size, :price, :user_id);
    """), catalog)

    conn.execute(sqlalchemy.text("""
    INSERT INTO catalog_ledger (customer_id, catalog_id, quantity, created_at)
    VALUES (:customer_id, :catalog_id, :quantity, :created_at);
    """), catalog_ledger)

    conn.execute(sqlalchemy.text("""
    INSERT INTO carts (bought, catalog_id, user_id)
    VALUES (:bought, :catalog_id, :user_id);
    """), carts)

    conn.execute(sqlalchemy.text("""
    INSERT INTO cart_items (cart_id, catalog_id, quantity)
    VALUES (:cart_id, :catalog_id, :quantity);
    """), cart_items)

print("Data generation complete!")
