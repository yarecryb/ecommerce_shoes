import sqlalchemy
import os
import dotenv
from faker import Faker
import numpy as np

# Load environment variables
dotenv.load_dotenv()

def database_connection_url():
    DB_USER = os.environ.get("POSTGRES_USER")
    DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
    DB_SERVER = os.environ.get("POSTGRES_SERVER")
    DB_PORT = os.environ.get("POSTGRES_PORT")
    DB_NAME = os.environ.get("POSTGRES_DB")
    return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True)

# Create a new Faker instance
fake = Faker()

# Define the schema and create tables
with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
    DROP TABLE IF EXISTS cart_items;
    DROP TABLE IF EXISTS carts;
    DROP TABLE IF EXISTS catalog_ledger;
    DROP TABLE IF EXISTS catalog;
    DROP TABLE IF EXISTS users;

    CREATE TABLE public.users (
        id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        username text not null,
        email text not null,
        password text null,
        full_name text null,
        auth_token uuid not null default gen_random_uuid(),
        wallet double precision not null default '0'::double precision,
        CONSTRAINT users_pkey PRIMARY KEY (id),
        CONSTRAINT users_auth_token_key UNIQUE (auth_token),
        CONSTRAINT users_email_key UNIQUE (email),
        CONSTRAINT users_id_key UNIQUE (id),
        CONSTRAINT users_username_key UNIQUE (username)
    ) TABLESPACE pg_default;

    CREATE TABLE public.catalog (
        id bigint generated by default as identity,
        title text null,
        brand text null,
        size text null,
        price numeric null,
        created_at timestamp with time zone not null default now(),
        user_id bigint not null,
        quantity bigint not null default '0'::bigint,
        CONSTRAINT catalog_pkey PRIMARY KEY (id),
        CONSTRAINT catalog_id_key UNIQUE (id),
        CONSTRAINT catalog_user_id_fkey FOREIGN KEY (user_id) REFERENCES users (id)
    ) TABLESPACE pg_default;

    CREATE TABLE public.catalog_ledger (
        id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        customer_id bigint not null,
        catalog_id bigint not null,
        quantity integer not null default 0,
        CONSTRAINT catalog_ledger_pkey PRIMARY KEY (id),
        CONSTRAINT catalog_ledger_id_key UNIQUE (id),
        CONSTRAINT catalog_ledger_catalog_id_fkey FOREIGN KEY (catalog_id) REFERENCES catalog (id),
        CONSTRAINT catalog_ledger_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES users (id)
    ) TABLESPACE pg_default;

    CREATE TABLE public.carts (
        cart_id bigint generated by default as identity,
        bought boolean null default false,
        created_at timestamp with time zone not null default now(),
        catalog_id bigint null,
        user_id bigint not null,
        CONSTRAINT carts_pkey PRIMARY KEY (cart_id),
        CONSTRAINT carts_cart_id_key UNIQUE (cart_id),
        CONSTRAINT carts_catalog_id_fkey FOREIGN KEY (catalog_id) REFERENCES catalog (id),
        CONSTRAINT carts_user_id_fkey FOREIGN KEY (user_id) REFERENCES users (id)
    ) TABLESPACE pg_default;

    CREATE TABLE public.cart_items (
        id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        cart_id bigint null,
        catalog_id bigint null,
        quantity bigint null,
        CONSTRAINT cart_items_pkey PRIMARY KEY (id),
        CONSTRAINT cart_items_id_key UNIQUE (id),
        CONSTRAINT cart_items_cart_id_fkey FOREIGN KEY (cart_id) REFERENCES carts (cart_id),
        CONSTRAINT cart_items_catalog_id_fkey FOREIGN KEY (catalog_id) REFERENCES catalog (id)
    ) TABLESPACE pg_default;
    """))

# Number of users to generate
num_users = 100000
num_catalogs = 100000
num_ledger_entries = 500000
num_carts = 100000
num_cart_items = 1000000

# Create fake data with unique usernames and emails
usernames = set()
emails = set()
users = []
for _ in range(num_users):
    while True:
        username = fake.user_name()
        if username not in usernames:
            usernames.add(username)
            break

    while True:
        email = fake.email()
        if email not in emails:
            emails.add(email)
            break

    users.append({
        'username': username,
        'email': email,
        'password': fake.password(),
        'full_name': fake.name(),
        'wallet': round(fake.random_number(digits=5, fix_len=True) / 100, 2)
    })

catalog = [{
    'title': fake.word(),
    'brand': fake.company(),
    'size': str(fake.random_element(elements=('S', 'M', 'L', 'XL'))),
    'price': round(fake.random_number(digits=5, fix_len=True) / 100, 2),
    'user_id': fake.random_int(min=1, max=num_users),
    'quantity': fake.random_int(min=1, max=100)
} for _ in range(num_catalogs)]

catalog_ledger = [{
    'customer_id': fake.random_int(min=1, max=num_users),
    'catalog_id': fake.random_int(min=1, max=num_catalogs),
    'quantity': fake.random_int(min=1, max=10)
} for _ in range(num_ledger_entries)]

carts = [{
    'bought': fake.boolean(),
    'catalog_id': fake.random_int(min=1, max=num_catalogs) if fake.boolean() else None,
    'user_id': fake.random_int(min=1, max=num_users)
} for _ in range(num_carts)]

cart_items = [{
    'cart_id': fake.random_int(min=1, max=num_carts),
    'catalog_id': fake.random_int(min=1, max=num_catalogs),
    'quantity': fake.random_int(min=1, max=10)
} for _ in range(num_cart_items)]

# Insert data into tables
with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
    INSERT INTO users (username, email, password, full_name, wallet)
    VALUES (:username, :email, :password, :full_name, :wallet);
    """), users)

    conn.execute(sqlalchemy.text("""
    INSERT INTO catalog (title, brand, size, price, user_id, quantity)
    VALUES (:title, :brand, :size, :price, :user_id, :quantity);
    """), catalog)

    conn.execute(sqlalchemy.text("""
    INSERT INTO catalog_ledger (customer_id, catalog_id, quantity)
    VALUES (:customer_id, :catalog_id, :quantity);
    """), catalog_ledger)

    conn.execute(sqlalchemy.text("""
    INSERT INTO carts (bought, catalog_id, user_id)
    VALUES (:bought, :catalog_id, :user_id);
    """), carts)

    conn.execute(sqlalchemy.text("""
    INSERT INTO cart_items (cart_id, catalog_id, quantity)
    VALUES (:cart_id, :catalog_id, :quantity);
    """), cart_items)

print("Data generation complete!")
